name: Build

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 1 * * *'
  merge_group:
permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-24.04
    permissions:
      actions: write          # Upload artifacts
      security-events: write  # Upload CodeQL results
    steps:
      - name: Check out Git repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up JDK 21
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Cache Local Maven Repo
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.m2/repository
          key: build-maven-${{ hashFiles('pom.xml') }}

      - uses: s4u/maven-settings-action@894661b3ddae382f1ae8edbeab60987e08cf0788 # v4.0.0
        with:
          servers: |
            [{"id": "mii", "username": "${{ github.actor }}", "password": "${{ secrets.GITHUB_TOKEN }}"}]

      - name: Initialize CodeQL
        uses: github/codeql-action/init@0499de31b99561a6d14a36a5f662c2a54f91beee # v4
        with:
          languages: java
          queries: security-and-quality

      - name: Download Ontology, Build Without Tests
        run: mvn -P download-ontology -B package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Build and Export to Docker
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          tags: torch:latest
          outputs: type=docker,dest=/tmp/torch.tar
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@0499de31b99561a6d14a36a5f662c2a54f91beee # v4

      - name: Upload Torch Jar
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5
        with:
          name: torch-jar
          path: target/torch.jar

      - name: Upload Torch Image
        uses: actions/upload-artifact@330a01c490aca151604b8cf639adc76d48f6c5d4 # v5
        with:
          name: torch-image
          path: /tmp/torch.tar

  image-scan:
    needs: build
    runs-on: ubuntu-24.04
    permissions:
      security-events: write  # Upload Trivy SARIF results
    steps:
      - name: Download Torch Image
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6
        with:
          name: torch-image
          path: /tmp

      - name: Load Torch Image
        run: docker load --input /tmp/torch.tar

      - name: Check out Git repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 # 0.33.1
        with:
          image-ref: torch:latest
          format: sarif
          output: trivy-results.sarif
          severity: 'CRITICAL,HIGH'
          timeout: '15m0s'
          skip-files: 'app/ontology/*'
        env:
          TRIVY_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-db:2
          TRIVY_JAVA_DB_REPOSITORY: public.ecr.aws/aquasecurity/trivy-java-db:1

      - name: Upload Trivy Scan Results to GitHub Security Tab
        uses: github/codeql-action/upload-sarif@0499de31b99561a6d14a36a5f662c2a54f91beee # v4
        with:
          sarif_file: trivy-results.sarif

  test:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Check out Git repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up JDK 21
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Cache Local Maven Repo
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.m2/repository
          key: tests-maven-${{ hashFiles('pom.xml') }}

      - uses: s4u/maven-settings-action@894661b3ddae382f1ae8edbeab60987e08cf0788 # v4.0.0
        with:
          servers: |
            [{"id": "mii", "username": "${{ github.actor }}", "password": "${{ secrets.GITHUB_TOKEN }}"}]

      - name: Download Ontology and Run Tests
        run: mvn -P download-ontology -B verify

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5
        with:
          files: target/site/jacoco/jacoco.xml
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true

  blackbox-integration-tests:
    needs: build
    runs-on: ubuntu-24.04

    steps:
      - name: Download Torch Image
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6
        with:
          name: torch-image
          path: /tmp

      - name: Load Torch Image
        run: docker load --input /tmp/torch.tar


      - name: Check out Git repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up JDK 21
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Cache Local Maven Repo
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.m2/repository
          key: tests-maven-${{ hashFiles('pom.xml') }}

      - uses: s4u/maven-settings-action@894661b3ddae382f1ae8edbeab60987e08cf0788 # v4.0.0
        with:
          servers: |
            [{"id": "mii", "username": "${{ github.actor }}", "password": "${{ secrets.GITHUB_TOKEN }}"}]

      - name: Run Blackbox Integration Tests
        run: mvn -P blackbox-integration-tests -B verify
  
  
  script-integration-test:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Download Torch Image
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6
        with:
          name: torch-image
          path: /tmp

      - name: Load Torch Image
        run: docker load --input /tmp/torch.tar

      - name: Check out Git repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Start Docker Compose
        working-directory: .github/workflows/script-integration-test
        run: docker compose up -d

      - name: Wait for source-fhir-server to become healthy
        run: |
          set -e

          echo "⏳ Waiting for source-fhir-server container to become healthy..."

          # Get the container name (adjust if you're not using default naming)
          CONTAINER=$(docker ps --filter "name=source-fhir-server" --format "{{.Names}}" | head -n1)

          if [ -z "$CONTAINER" ]; then
            echo "❌ No container found matching source-fhir-server"
            docker ps -a
            exit 1
          fi

          for i in {1..30}; do
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' "$CONTAINER" || echo "unavailable")
            echo "Attempt $i - Status: $STATUS"
            if [ "$STATUS" == "healthy" ]; then
              echo "✅ $CONTAINER is healthy"
              exit 0
            fi
            sleep 10
          done

          echo "❌ $CONTAINER did not become healthy in time"
          docker logs "$CONTAINER"
          exit 1

      - name: Run integration script
        run: .github/workflows/script-integration-test/integration-test.sh
  
  env-var-check:
    needs: build
    runs-on: ubuntu-24.04
    steps:
      - name: Download Torch Image
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6
        with:
          name: torch-image
          path: /tmp

      - name: Load Torch Image
        run: docker load --input /tmp/torch.tar

      - name: Run without required env vars
        run: |
          set -e
          # Run Torch without required env vars
          if docker run --rm torch:latest 2>&1 | tee output.log | grep -q "APPLICATION FAILED TO START"; then
            echo "✅ Container failed as expected due to missing required config"
          else
            echo "❌ Container did not fail with missing config"
            cat output.log
            exit 1
          fi

  push-image:
    needs:
      - test
      - image-scan
      - blackbox-integration-tests
      - script-integration-test
      - env-var-check
    runs-on: ubuntu-24.04
    permissions:
      packages: write  # Push to GitHub Container Registry
      id-token: write  # For Cosign signing
    if: ${{ ! startsWith(github.head_ref, 'dependabot/')}}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up JDK 21 for Maven Build
        uses: actions/setup-java@dded0888837ed1f317902acf8a20df0ad188d165 # v5
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Cache Local Maven Repo
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        with:
          path: ~/.m2/repository
          key: tests-maven-${{ hashFiles('pom.xml') }}

      - uses: s4u/maven-settings-action@894661b3ddae382f1ae8edbeab60987e08cf0788 # v4.0.0
        with:
          servers: |
            [{"id": "mii", "username": "${{ github.actor }}", "password": "${{ secrets.GITHUB_TOKEN }}"}]

      - name: Download Torch Jar
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6
        with:
          name: torch-jar
          path: target

      - name: Download Torch Image
        uses: actions/download-artifact@018cc2cf5baa6db3ef3c5f8a56943fffe632ef53 # v6
        with:
          name: torch-image
          path: /tmp

      - name: Load Torch Image
        run: docker load --input /tmp/torch.tar

      - name: Download Ontology
        run: mvn -Pdownload-ontology -B process-resources

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3

      - name: Install Cosign
        uses: sigstore/cosign-installer@398d4b0eeef1380460a10c8013a76f728fb906ac # v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker-meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        with:
          images: |
            ghcr.io/medizininformatik-initiative/torch
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push
        id: docker-build-push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.docker-meta.outputs.tags }}
          labels: ${{ steps.docker-meta.outputs.labels }}

      - name: Sign GHCR Image
        run: cosign sign --yes "ghcr.io/${{ github.repository }}@${{ steps.docker-build-push.outputs.digest }}"

      - name: Release
        uses: softprops/action-gh-release@6da8fa9354ddfdc4aeace5fc48d7f679b5214090 # v2
        if: startsWith(github.ref, 'refs/tags/')

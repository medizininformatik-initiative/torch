/// url = 'http://example.org/fhir/StructureMap/example1'
/// name = 'Conditional Check'
/// title = 'Conditional Check'


/*
Example that implements a check on a condition field for the specific code I95.0  and copies the condition Ressource.
*/


uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias sourceBundle as source;
uses "http://hl7.org/fhir/StructureDefinition/Bundle" alias targetBundle as target;

imports "http://example.org/fhir/StructureMap/library"

group CopyBundle(source src : SourceBundle, target tgt : TargetBundle) {
    src.resourceType as rt -> tgt.resourceType = rt;
    src.type as t -> tgt.type = t;
    //existance check not working properly yet see /Testdaten/VHF-Testdaten_01-VHF00002.json throws no error despite FHIR PATH evaluating to false
    src.entry as sentry check(src.entry.resource.ofType(Condition).exists()) -> tgt.entry as tentry then  CopyEntry(sentry,tentry);
       
}


group CopyEntry(source src : Entry, target tgt : Entry) {
    
    //where acts as a filter to apply the check only to the resources of the correct type. 
    src.resource as resource where($this.ofType(Condition)) check($this.code.coding.where(code = 'I95.0').exists()) -> tgt.resource = create('Condition') as tresource then{
        resource as resource -> tresource as tresource then CopyCondition(resource, tresource) "create Condition" ;
        src.fullUrl as fullUrl -> tgt.fullUrl = fullUrl;
    } "handle Condition";
    
}


group CopyObservation(source src : Observation, target tgt : Observation) {
    src as src -> tgt as tgt then CopyBasic(src, tgt) "copy Basic";
    src.identifier as identifier -> tgt.identifier = create('Identifier') as tidentifier then  CopyIdentifier(identifier, tidentifier) "CopyObservation create Identifier" ;
    src.code as code -> tgt.code = create('CodeableConcept') as tcode then CopyCodeableConcept(code, tcode) "CopyObservation create Code" ;
    src.effective as effective -> tgt.effective=effective "CopyObservation copy effective";
    src.value as value where($this.ofType(Quantity)) -> tgt.value = create('Quantity') as quantity then CopyQuantity(value,quantity) "CopyObservation create Quantity" ;
    src.status as status -> tgt.status = status "copy status";
    src.subject as subject -> tgt.subject = subject "copy subject";
}


group CopyCondition(source src : Condition, target tgt : Condition) {
    src as src -> tgt as tgt then CopyBasic(src, tgt) "copy Basic";
    src.identifier as identifier -> tgt.identifier = create('Identifier') as tidentifier then  CopyIdentifier(identifier, tidentifier) "CopyCondition create Identifier" ;
    src.clinicalStatus as clinicalStatus -> tgt.clinicalStatus = create('CodeableConcept') as tclinicalStatus then  CopyCodeableConcept(clinicalStatus, tclinicalStatus) "CopyCondition create clinicalStatus" ;
    src.code as code -> tgt.code = create('CodeableConcept') as tcode then CopyCodeableConcept(code, tcode) "create Code" ;
    src.abatment as abatment -> tgt.abatment = abatment;
    src.onset as onset -> tgt.onset = onset;
}

































































